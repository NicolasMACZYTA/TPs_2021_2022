%{
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define YYSTYPE char*

int yylex();
void yyerror(const char *erreurMsg);

%}

%token ENTIER
%token DECIMALE
%token BOOL
%token CHAR
%token STRING

%left DEBUT_OBJ
%left FIN_OBJ
%left DEBUT_ARRAY
%left FIN_ARRAY
%left AFFECTATEUR
%left SEPARATEUR

%%

FONC_DEF: FONC STRING PAREN_OUVRANT PARAMS PAREN_FERMANT TYPE_SETTER BLOC_INSTRUCTION FINFONC;

PROC_DEF: PROC STRING PAREN_OUVRANT PARAMS PAREN_FERMANT BLOC_INSTRUCTION FINPROC;

PARAMS: PARAM SEPARATEUR PARAMS
    | PARAM SEPARATEUR PARAM
    | PARAM
    ;

PARAM: STRING TYPE_SETTER TYPE;

BLOC_INSTRUCTION: INSTRUCTION BLOC_INSTRUCTION
    | INSTRUCTION INSTRUCTION
    | INSTRUCTION
    ;

INSTRUCTION: AFFECTATION
    | BOUCLE
    | CONDITIONELLE
    | APPEL
    ;

AFFECTATION: VARIABLE AFFECTATEUR ENTIER
    | VARIABLE AFFECTATEUR BOOL
    ;

BOUCLE: TANTQUE PAREN_OUVRANT CONDITION PAREN_FERMANT BLOC_INSTRUCTION FINTANTQUE;

CONDITIONELLE:  SI PAREN_OUVRANT CONDITION PAREN_FERMANT BLOC_INSTRUCTION FINSI
    | SI PAREN_OUVRANT CONDITION PAREN_FERMANT BLOC_INSTRUCTION DEMI_CONDITIONELLE FINSI
    ;

DEMI_CONDITIONELLE: SINON SI PAREN_OUVRANT CONDITION PAREN_FERMANT BLOC_INSTRUCTION
    | DEMI_CONDITIONELLE DEMI_CONDITIONELLE;

CONDITION: VALEUR COMPARATEUR VALEUR;

APPEL: STRING PAREN_OUVRANT ARGUMENTS PAREN_FERMANT
    | STRING PAREN_OUVRANT ARGUMENTS PAREN_FERMANT
    ;

ARGUMENTS: VALEUR ARGUMENTS
    | VALEUR VALEUR
    | VALEUR
    ;

VALEUR: VARIABLE
    | ENTIER
    | BOOL
    ;

VARIABLE: STRING;

%%

int main() {
  yyparse();
  return EXIT_SUCCESS;
}